class Solution {
public:
    struct TrieNode {
        bool terminate;
        string symbol;
        TrieNode *link[26];
        TrieNode() {
            this->terminate = false;
            for (int i = 0; i < 26; i++) {
                this->link[i]=NULL;
            }
        }
    };
private:
    TrieNode *root;
    void build(vector<string> words) {
        for (int i = 0; i < words.size(); i++) {
            TrieNode *curr = root;
            for (int j = 0; j < words[i].size(); j++) {
                if (curr->link[words[i][j]-'a'] == NULL) {
                    curr->link[words[i][j]-'a'] = new TrieNode();
                }
                curr = curr->link[words[i][j]-'a'];
            }
            curr->terminate = true;
            curr->symbol = words[i];
        }
    }
    void dfs(vector<vector<bool>> &used, vector<vector<char>>& board, TrieNode* node, int i, int j, vector<string> &result) {
        TrieNode *next = node->link[board[i][j]-'a'];
        if (next == NULL) return;
        
        else {
            used[i][j] = true;
            
            if (next->terminate) {
                result.push_back(next->symbol);
                next->terminate = false;
            }
            
            if (i > 0 && used[i-1][j] == false) dfs(used, board, next, i-1, j, result);
                    
            if (j > 0 && used[i][j-1] == false) dfs(used, board, next, i, j-1, result);
            
            if (i < used.size()-1 && used[i+1][j] == false)  dfs(used, board, next, i+1, j, result);
            
            if (j < used[0].size()-1 && used[i][j+1] == false) dfs(used, board, next, i, j+1, result);
            
            used[i][j] = false;
        }
    }
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        root = new TrieNode();
        build(words);
        vector<string> result;
        string sol;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[0].size(); j++) {
                vector<vector<bool>> used(board.size(), vector<bool>(board[0].size(), false));
                dfs(used, board, root, i, j, result);
            }
        }
        
        sort(result.begin(), result.end());
        return result;
    }
};