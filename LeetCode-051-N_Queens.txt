class Solution {
private:
    
    string rowGen(int len, int posQ) {
        string newstr;
        for (int i=0; i<len; i++) {
            if (i!=posQ) newstr.append(1, '.');
            else newstr.append(1, 'Q');
        }
        return newstr;
    }
    
    bool validPosQ(int row, int col, int N, vector<string> sol) {
        int i=row, h=col, k=col;
        while (i>0) {
            i--;
            if (sol[i][col]=='Q') return false;
            if (h>0) {
                h--;
                if (sol[i][h]=='Q') return false;
            }
            if (k<N-1) {
                k++;
                if (sol[i][k]=='Q') return false;
            }
        }
        return true;
    }
    
    void nQueens(vector<vector<string>> &result, vector<string> &sol, int N) {
        if (sol.size()==N) {
            result.push_back(sol);
        }
        else {
            int row=sol.size();
            for (int i=0; i<N; i++) {
                if (validPosQ(row, i, N, sol)) {
                    sol.push_back(rowGen(N, i));
                    nQueens(result, sol, N);
                    sol.pop_back();
                }
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        if (n==0 || n==2 || n==3) return result;
        else if (n==1) {
            result.resize(1, vector<string>(1, "Q"));
            return result;
        }
        else {
            vector<string> sol;
            nQueens(result, sol, n);
            return result;
        }
    }
};